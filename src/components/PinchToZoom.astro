---
type Props = {
  id: string;
  left?: string;
  top?: string;
  disabled?: boolean;
};
const { id, left = undefined, top = undefined, disabled = false } = Astro.props;

let inlineStyles = "";

if (disabled) {
  inlineStyles += "display: none;";
} else {
  if (left) {
    inlineStyles += `left: ${left};`;
  }

  if (top) {
    inlineStyles += `top: ${top};`;
  }
}
---

<div class="pinch-to-zoom f-panzoom" id={id}>
  <div class="pinch-to-zoom__button-container" style={inlineStyles}>
    <button
      data-panzoom-action="zoomToFull"
      data-content-id={id}
      class="button button--pich-to-zoom"></button>
  </div>
  <button class="pinch-to-zoom__close-modal" style="display: none">Ã—</button>
  <div class="pinch-to-zoom__container f-panzoom__viewport">
    <div class="f-panzoom__content">
      <slot />
    </div>
    
</div>
</div>
<script>
  import { Panzoom, Fancybox } from "@fancyapps/ui";
  import { Toolbar } from "@fancyapps/ui/dist/panzoom/panzoom.toolbar.esm.js";
  import { OptionsType } from "@fancyapps/ui/dist/panzoom/panzoom.esm.js";

  const options: Partial<OptionsType> = {
    click: "toggleCover",
    Toolbar: {
      display: ["zoomIn", "zoomOut"],
    },
  };

  /* This code is adding an event listener to the `DOMContentLoaded` event, which fires when the initial
HTML document has been completely loaded and parsed. Once the event is fired, the code selects all
the buttons with the class `button--pich-to-zoom` and adds a click event listener to each of them.
When a button is clicked, the code retrieves the ID of the container element from the
`data-content-id` attribute of the button, selects the container element using the ID, and creates a
new instance of the `Panzoom` class with the container element, the `options` object, and the
`Toolbar` module as arguments. This allows the user to zoom in and out of the container element
using the pan and zoom controls provided by the `Panzoom` library. */
  document.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll("button.button--pich-to-zoom");
    
    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        //const phantom =document.querySelector(".phantom-text");
        //phantom.style.display = 'block'
        //setTimeout(()=>{phantom.style.display = 'block'},0) 
        //setTimeout(()=>{phantom.style.visibility = 'visible'},100) 
        
        const containerId = button.dataset.contentId;
        const container = document.getElementById(containerId);
        const body = document.querySelector("body");
        
        const clone = container.cloneNode(true) as HTMLElement;
        clone.setAttribute("style", "display: none");
        clone.id = "clone-" + clone.id;
        const cloneZoomButton = clone.querySelector(
          "button.button--pich-to-zoom"
          );
          cloneZoomButton.parentElement.removeChild(cloneZoomButton);
          body.appendChild(clone);
          
          let panzoom: Panzoom;
          
          const modal = new Fancybox([{ src: clone.id }], {
            autoFocus: true,
            defaultType: "inline",
            placeFocusBack: true,
            trapFocus: true,
            closeButton: false,
            id: clone.id,
            hideScrollbar: true,
            defaultDisplay: "flex",
            on: {
              done: () => {
                //phantom.style.visibility = 'visible'
                //const phantom =document.querySelector(".phantom-text");
               
                panzoom = new Panzoom(clone, options, { Toolbar });
                const slideContainer = document.querySelector(".fancybox__slide");
                if (slideContainer) {
                  slideContainer.setAttribute("style", "padding: 0 !important");
                }
                //setTimeout(()=>{phantom.style.display = 'block'},100) 
                
                const closeModalButton = clone.querySelector(
                  ".pinch-to-zoom__close-modal"
                  );
                  closeModalButton.removeAttribute("style");
                  closeModalButton.addEventListener("click", () => {
                    panzoom.destroy();
                    modal.close();
                  });

                const phantom = document.querySelectorAll(

                ".phantom-text"

              ) as NodeListOf<HTMLElement>;

              phantom.forEach((element) => {

                element.style.display = "block";

              });

                },
                destroy: () => {
                  clone.parentElement.removeChild(clone);
                },
                
                close: () => {
              //const phantom =document.querySelector(".phantom-text");
              //phantom.style.display = 'none'
              //phantom.style.visibility = 'hidden'
              const phantom = document.querySelectorAll(

                ".phantom-text"

              ) as NodeListOf<HTMLElement>;

              phantom.forEach((element) => {

                element.style.display = "none";

              }); 
            },
          },
        });
      });
    });
  });
</script>
